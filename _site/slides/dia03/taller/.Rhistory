library(palmerpenguins)
data(package = 'palmerpenguins')
library(palmerpenguins)
data(penguins)
force(penguins)
force(penguins_raw)
glimpse(penguins)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
glimpse(penguins)
View(penguins)
filter(penguins, species == "Chinstrap")
penguins |> # CTL + SHIFT + M
filter(species == "Chinstrap")
penguis_chinst <- penguins |> # CTL + SHIFT + M
filter(species == "Chinstrap")
penguis_chinst <- penguins |> # CTL + SHIFT + M
filter(species == "Chinstrap")
penguis_chinst
penguis_chinst <- penguins |>
filter(species == "Chinstrap")
penguis_chinst
View(penguis_chinst)
penguins %>%
filter(species == "Chinstrap", species == "Gento")
penguins %>%
filter(species == "Chinstrap" | species == "Gento")
penguins %>%
filter(species %in% c("Chinstrap", "Gento"))
penguins %>%
filter(species == "Adelie", island == "Dream")
penguins %>%
filter(species == "Adelie" & island == "Dream")
penguins |>
arrange(bill_length_mm)
penguins_ascend <- penguins |>
arrange(bill_length_mm)
penguins_ascend <- penguins |>
arrange(bill_length_mm)
penguins_ascend
penguins |>
arrange(desc(bill_length_mm))
penguins_descend <- penguins |>
arrange(desc(bill_length_mm))
penguins_descend
penguins |>
filter(species != "Chinstrap")
penguins %>%
filter(flipper_length_mm >= 200)
penguins |>
filter(body_mass_g <= 2900)
penguins |>
filter(body_mass_g <= 2900) -> base1
penguins |>
filter(body_mass_g <= 2900) -> base1
base1 |>
arrange(bill_length_mm)
penguins |>
filter(body_mass_g <= 2900)
penguins |>
filter(body_mass_g <= 2900) |>
arrange(bill_length_mm)
penguins |>
select(species, island)
penguins |>
select(-sex, -island)
penguins |>
select(-sex, -island) -> penguins_excluido
penguins |>
select(-sex, -island) -> penguins_excluido
penguins |>
select(-sex, -island) -> penguins_excluido
penguins_excluido
penguins |>
select(-c(sex, island)) -> penguins_excluido
penguins_excluido
penguins |>
select(bill_length_mm, flipper_length_mm)
penguins |>
select(contains("length"))
penguins |>
select(starts_with("bill"))
penguins |>
select(starts_with("bill"), contents("length"))
penguins |>
select(starts_with("bill"), contains("length"))
penguins |>
select(species:body_mass_g)
penguins %>%
mutate(body_mass_kg = body_mass_g / 1000)
penguins %>%
mutate(body_mass_kg = body_mass_g / 1000) |>
mutate(flipper_length_m = flipper_length_mm / 1000)
penguins %>%
mutate(body_mass_kg = body_mass_g / 1000,
flipper_length_m = flipper_length_mm / 1000)
penguins |>
rename(sexo = sex)
penguins |>
rename(sexo = sex) |>
rename(img = body_mass_g)
penguins |>
rename(sexo = sex,
img = body_mass_g)
View(penguins)
library(tidyverse)
library(labelled)
library(palmerpenguins)
penguis2 <- penguins |>
rename(sexo = sex,
img = body_mass_g)
penguis2
penguis2 <- penguins |>
rename(sexo = sex,
img = body_mass_g)
penguis2
penguins2 |>
set_variable_labels(species = "Especie de pingüino",
island = "Isla especifica",
sexo = "Sexo",
year = "Año")
penguins2 <- penguins |>
rename(sexo = sex,
img = body_mass_g)
penguins2
penguins2 |>
set_variable_labels(species = "Especie de pingüino",
island = "Isla especifica",
sexo = "Sexo",
year = "Año")
View(penguins2)
penguins2 <- penguins2 |>
set_variable_labels(species = "Especie de pingüino",
island = "Isla especifica",
sexo = "Sexo",
year = "Año")
penguins2 <- penguins2 |>
set_variable_labels(species = "Especie de pingüino",
island = "Isla especifica",
sexo = "Sexo",
year = "Año")
View(penguis2)
penguins2 <- penguins2 |>
set_variable_labels(species = "Especie de pingüino",
island = "Isla especifica",
sexo = "Sexo",
year = "Año")
View(penguins2)
# Antes de cargar los siguientes paquetes, se deben instalar desde los paquetes.
library(tidyverse)                   # Varias funciones de tidyverse (dplyr, ggplot2, etc.)
library(rio)                         # Navaja suiza de la importación de datos
library(labelled)                    # Proporciona look_for()
library(skimr)                       # Análisis inicial de datos
library(Hmisc)                       # Análisis inicial de datos
library(janitor)                     # Para identificar duplicados
library(visdat)                      # Inspección de datos perdidos
library(VIM)                         # Inspección de datos perdidos
library(naniar)                      # Inspección de datos perdidos
# Antes de cargar los siguientes paquetes, se deben instalar desde los paquetes.
library(tidyverse)                   # Varias funciones de tidyverse (dplyr, ggplot2, etc.)
library(rio)                         # Navaja suiza de la importación de datos
library(labelled)                    # Proporciona look_for()
library(skimr)                       # Análisis inicial de datos
library(Hmisc)                       # Análisis inicial de datos
library(janitor)                     # Para identificar duplicados
library(visdat)                      # Inspección de datos perdidos
library(VIM)                         # Inspección de datos perdidos
library(naniar)                      # Inspección de datos perdidos
data_enaho <- import("data_enaho2017_v2.csv")
View(data_enaho)
data_clean <- data_enaho |>
rename(id = codperso,
agua_pot = tiene_agua_potable,
agua_acc = acceso_agua,
agua_sihoras = cuantas_horas_si_agua,
agua_proc = procedencia_agua)
View(data_clean)
data_clean |>
select(id, hog_nhab)
data_clean |>
select(id, everything())
data_clean |>
mutate(año = 2017)
data_clean |>
mutate(conectividad = tiene_internet)
data_clean <- data_clean |>
rename(nbi_vivie = necesid_basicas_insatisf_vivie,
nbi_hacin = necesid_basicas_insatist_hacin,
nbi_sshh = necesid_basicas_insatisf_sshh,
nbi_noesc = necesid_basicas_insatisf_noesc,
nbi_depec = necesid_basicas_insatisf_depec)
data_clean |>
count(nbi_vivie)
data_clean |>
mutate(nbi_vivie = case_when(nbi_vivie == "no" ~ 0,
nbi_vivie == "si" ~ 1,
TRUE ~ as.numeric(NA)))
data_clean |>
mutate(nbi_vivie = case_when(nbi_vivie == "no" ~ 0,
nbi_vivie == "si" ~ 1,
TRUE ~ as.numeric(NA)),
nbi_hacin = case_when(nbi_hacin == "no" ~ 0,
nbi_hacin == "si" ~ 1,
TRUE ~ as.numeric(NA)))
data_clean |>
mutate(nbi_vivie = case_when(nbi_vivie == "no" ~ 0,
nbi_vivie == "si" ~ 1,
TRUE ~ as.numeric(NA)),
nbi_hacin = case_when(nbi_hacin == "no" ~ 0,
nbi_hacin == "si" ~ 1,
TRUE ~ as.numeric(NA)),
nbi_sshh = case_when(nbi_sshh == "no" ~ 0,
nbi_sshh == "si" ~ 1,
TRUE ~ as.numeric(NA)),
nbi_noesc = case_when(nbi_noesc == "no" ~ 0,
nbi_noesc == "si" ~ 1,
TRUE ~ as.numeric(NA)) )
data_clean |>
mutate(nbi_vivie = case_match(nbi_vivie,
"no" ~ 0,
"si" ~ 1))
data_clean |>
mutate(nbi_vivie = case_match(nbi_vivie,
"no" ~ 0,
"si" ~ 1),
nbi_hacin = case_match(nbi_hacin,
"no" ~ 0,
"si" ~ 1),
nbi_sshh = case_match(nbi_sshh,
"no" ~ 0,
"si" ~ 1),
nbi_noesc = case_match(nbi_noesc,
"no" ~ 0,
"si" ~ 1))
data_clean |>
mutate(across(starts_with("nbi"), ~case_match(.x,
"no" ~ 0,
"si" ~ 1)))
data_clean |>
mutate(across(starts_with("nbi"), ~case_when(.x == "no" ~ 0,
.x == "si" ~ 1,
TUE ~ as.numeric(NA))))
data_clean |>
mutate(across(starts_with("nbi"), ~case_when(. == "no" ~ 0,
. == "si" ~ 1,
TUE ~ as.numeric(NA))))
data_clean |>
mutate(across(starts_with("nbi"), ~case_when(.x == "no" ~ 0,
.x == "si" ~ 1,
TRUE ~ as.numeric(NA))))
data_clean <- data_clean |>
mutate(imc = (jefe_peso_g / 1000) / (jefe_tall_cm / 100) ^ 2)
data_clean <- data_clean |>
mutate(imc = (jefe_peso_g / 1000) / ((jefe_tall_cm / 100) ^ 2))
data_clean <- data_clean |>
mutate(imc = (jefe_peso_g / 1000) / ((jefe_talla_cm / 100) ^ 2))
data_clean
data_clean <- data_clean |>
mutate(imc_cat = case_when(imc < 25 ~ "Normal",
imc >= 25 & imc < 30 ~ "Sobrepeso",
imc >= 30 ~ "Obesidad",
TRUE ~ as.character(NA)))
data_clean
data_clean |>
mutate(tall_cat = case_when(jefe_talla_cm < 160 ~ "Chato",
jefe_talla_cm >= 160 & jefe_talla_cm < 180 ~ "Normal",
jefe_talla_cm >= 180 ~ "Alto",
TRUE ~ as.character(NA)))
data_clean <- data_clean |>
mutate(tall_cat = case_when(jefe_talla_cm < 160 ~ "Chato",
jefe_talla_cm >= 160 & jefe_talla_cm < 180 ~ "Normal",
jefe_talla_cm >= 180 ~ "Alto",
TRUE ~ as.character(NA)))
data_clean
data_clean <- data_clean |>
mutate(tall_cat = case_when(jefe_talla_cm < 160 ~ "Chato",
jefe_talla_cm >= 160 & jefe_talla_cm < 180 ~ "Normal",
jefe_talla_cm >= 180 ~ "Alto",
TRUE ~ NA))
data_clean
data_clean |>
glimpse()
glimpse(data_clean)
describe(data_clean)
skim(data_clean)
# Antes de cargar los siguientes paquetes, se deben instalar desde los paquetes.
library(tidyverse)                   # Varias funciones de tidyverse (dplyr, ggplot2, etc.)
library(rio)                         # Navaja suiza de la importación de datos
library(labelled)                    # Proporciona look_for()
library(skimr)                       # Análisis inicial de datos
library(Hmisc)                       # Análisis inicial de datos
library(janitor)                     # Para identificar duplicados
library(visdat)                      # Inspección de datos perdidos
library(VIM)                         # Inspección de datos perdidos
library(naniar)                      # Inspección de datos perdidos
library(summarytools)
dfSummary(data_clean)
print(dfSummary(data_clean,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
data_clean |>
get_dupes()
data_clean |>
get_dupes(id)
aggr(data_clean)
gg_miss_upset(data_clean)
