---
title: "<font color='white'>Taller 5</font>"
subtitle: "Análisis Estadístico de Datos en Salud"
author: 
  - Percy Soto-Becerra
  - Anthony Romero
date: last-modified
date-format: "DD-MM-YYYY"
description: "PFC 2023 -– IETSI, EsSalud"
format: 
  html:
    toc: true
    toc-depth: 3
    toc-title: "Índice"
    toc-location: right
    embed-resources: true
    number-sections: true
    theme: cerulean
    title-block-style: default
    title-block-banner: true
    section-divs: true
    css: [include/webex.css, include/styles.css]
    include-after-body: include/webex.js
    code-block-border-left: false
lang: es
execute: 
  message: false
  warning: false
---

```{r}
#| include: false
library(webexercises)
library(tidyverse)
library(gtsummary)
library(gt)
library(janitor)
library(knitr)
library(summarytools)
library(gmodels)
```

## Introducción

En este quinto taller del curso continuaremos revisando funciones para el análisis descriptivo de datos con paquetes como `Dplyr` y `Janitor` de `Tidyverse`, además revisaremos los paquetes `gtsummary`, `gmodels` y `Hmisc`. 

-Lectura sugerida: [Link](https://bookdown.org/content/b298e479-b1ab-49fa-b83d-a57c2b034d49/ranking.html)


## Cargar paquetes

```{r}
# Antes de cargar estos paquetes, se deben instalar desde la pestaña "Packages" en el panel de utilidades (inferior derecho).
library(tidyverse)                   # Varias funciones de tidyverse (dplyr, ggplot2, etc.)
library(rio)                         # Navaja suiza de la importación de datos
library(skimr)                       # Análisis inicial de datos
library(Hmisc)                       # Análisis inicial de datos
library(janitor)                     # Para identificar duplicados
library(gtsummary)                   # Para tablas estadísticas reproducibles
library(gmodels)                     # Para tablas de contingencia detalladas
library(summarytools)
```


## Importar bases de datos 

Utilicemos lo aprendido en sesiones previas para importar los datos de `linelist_cleaned` con el nombre **"data_ebola"** y de `boost_inmuno` con el nombre **"data_inmuno"**. Ambas son bases de datos libres tomadas del libro [The Epidemiologist R handbook](https://epirhandbook.com/en/index.html) y del estudio titulado “Immunogenicity and reactogenicity of a third dose of BNT162b2 vaccine for COVID-19 after a primary regimen with BBIBP-CorV or BNT162b2 vaccines in Lima, Peru” ([DOI](https://doi.org/10.1101/2022.05.01.22274548)), respectivamente.


::: {.callout-tip collapse="true"}
## Recordar

En sesiones previas aprendimos que antes de importar cualquier base de datos a nuestro R, debemos tener claro dos aspectos:

1. La ubicación del archivo -> Debe estar guardado en la misma carpeta del proyecto.

2. La extensión de la base -> Verificar si es formato stata (.dta), excel (.xlsx), spss (.sav), etc.

_y no olvidar que en la función `import()` se debe incluir tanto el nombre de la base como su extensión._
:::

Ahora importemos ambas bases:

```{r}
#Importamos linelist_cleaned
data_ebola <- import("linelist_cleaned.rds")

#Importamos boost_inmuno
data_inmuno <- import("boost_inmuno.dta")
```

Antes de empezar, démosle un vistazo a las bases de datos importadas:

::: {.callout-tip collapse="true"}
## Explorando la data

::: {.panel-tabset}

## Data_ebola

```{r}
head(data_ebola)
```

```{r}
glimpse(data_ebola)
```

```{r}
data_ebola %>% 
  skim()
```


## Data_inmuno

```{r}
head(data_inmuno)
```

```{r}
glimpse(data_inmuno)
```

```{r}
data_inmuno %>% 
  skim()
```

:::
:::

## Análisis descriptivo univariado de datos numéricos

### Ejercicio 1 {.unnumbered}

Calcular la media "IgG_Basal":

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  summarise(media_IgG_basal = mean(IgG_Basal, na.rm = TRUE))
```
:::

### Ejercicio 2 {.unnumbered}

Calcular la mediana y desviación estándar de la IgG_Final:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  summarise(mediana_IgG_final = median(IgG_Final, na.rm = TRUE),
            DE_IgG_final = sd(IgG_Final, na.rm= TRUE))
```
:::

### Ejercicio 3 {.unnumbered}

Calcular la media, desviación estándar, mediana, P25 y P75 del tiempo de dosis de refuerzo:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  summarise(media_tref = mean(tdosis_refuerzo, na.rm = TRUE), 
            DE_tref = sd(tdosis_refuerzo, na.rm = TRUE), 
            mediana_tref = median(tdosis_refuerzo, na.rm = TRUE), 
            p25_tref = quantile(tdosis_refuerzo, na.rm = TRUE, prob = c(0.25)), 
            p75_tref = quantile(tdosis_refuerzo, na.rm = TRUE, prob = c(0.75)))
```
:::

### Ejercicio 4 {.unnumbered}

Calcular la media, desviación estándar, mediana, P25 y P75 de la variable "edad":

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  summarise(media_edad = mean(edad, na.rm = TRUE), 
            DE_edad = sd(edad, na.rm = TRUE), 
            mediana_edad = median(edad, na.rm = TRUE),
            p25_edad = quantile(edad, na.rm = TRUE, prob = c(0.25)), 
            p75_edad = quantile(edad, na.rm = TRUE, prob = c(0.75)))
```
:::

### Ejercicio 5 {.unnumbered}

Calcula la media, mediana y desviación estándar de edad y de IgG_Final:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  summarise(media_edad = mean(edad, na.rm = TRUE), 
            DE_edad = sd(edad, na.rm = TRUE), 
            mediana_edad = median(edad, na.rm = TRUE),
            media_IgG_final = mean(IgG_Final, na.rm = TRUE),
            DE_IgG_Final = sd(IgG_Final, na.rm = TRUE),
            mediana_IgG_final = median(IgG_Final, na.rm = TRUE))
```
:::

### Ejercicio 6 {.unnumbered}

Calcula la media, mediana y desviación estándar de edad y del tiempo de dosis de refuerzo:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  summarise(media_edad = mean(edad, na.rm = TRUE), 
            DE_edad = sd(edad, na.rm = TRUE), 
            mediana_edad = median(edad, na.rm = TRUE),
            media_tref = mean(tdosis_refuerzo, na.rm = TRUE),
            DE_tref = sd(tdosis_refuerzo, na.rm = TRUE),
            mediana_tref = median(tdosis_refuerzo, na.rm = TRUE))
```
:::


## Análisis descriptivo bivariado de datos numéricos

### Ejercicio 7 {.unnumbered}

Utilice el código de la pregunta 4 y modifíquelo de tal manera que podamos comparar las medidas estadísticas calculadas entre varones y mujeres:

:::{.callout-tip collapse="true"}
## Recordatorio!

Como buenas prácticas en programación en R, si usamos la función `group_by()` **es obligatorio usar la función `ungroup()` después del `summarise()`.** Esto permite deshacer el agrupamiento inicial y mantener la data en su versión original. 

Veamos un ejemplo sencillo

```{r}
#| eval: false

data %>% 
  group_by(sexo) %>%      # Agrupamos según sexo 
  summarise(media_edad = mean(edad, na.rm=TRUE),
            mediana_edad = median(edad, na.rm=TRUE)) %>% 
  ungroup()     # Deshacemos el agrupamiento para volver a la data original
```
:::

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  group_by(sexo) %>% 
  summarise(media_IgG_basal = mean(IgG_Basal, na.rm = TRUE), 
            DE_IgG_basal = sd(IgG_Basal, na.rm = TRUE), 
            mediana_IgG_basal = median(IgG_Basal, na.rm = TRUE), 
            p25_IgG_basal = quantile(IgG_Basal, na.rm = TRUE, prob = c(0.25)), 
            p75_IgG_basal = quantile(IgG_Basal, na.rm = TRUE, prob = c(0.75))) %>% 
  ungroup()
```
:::

### Ejercicio 8 {.unnumbered}

Utilice el código de la pregunta 2 y modifíquelo de tal manera que se comparen las medidas estadísticas calculadas entre los que recibieron tipo de refuerzo heterólogo y los que recibieron refuerzo homólogo:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  group_by(tipo_refuerzo) %>% 
  summarise(mediana_IgG_final = median(IgG_Final, na.rm = TRUE),
            DE_IgG_final = sd(IgG_Final, na.rm= TRUE)) %>% 
  ungroup()
```
:::

### Ejercicio 9 {.unnumbered}

Utilice el código de la pregunta 3 y modifíquelo de tal manera que se comparen las medidas estadísticas calculadas según antecedente de COVID-19:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  group_by(ant_COV) %>% 
  summarise(media_tref = mean(tdosis_refuerzo, na.rm = TRUE), 
            DE_tref = sd(tdosis_refuerzo, na.rm = TRUE), 
            mediana_tref = median(tdosis_refuerzo, na.rm = TRUE), 
            p25_tref = quantile(tdosis_refuerzo, na.rm = TRUE, prob = c(0.25)), 
            p75_tref = quantile(tdosis_refuerzo, na.rm = TRUE, prob = c(0.75))) %>% 
  ungroup()
```
:::

### Ejercicio 10 {.unnumbered}

Utilice el código de la pregunta 6 y modifíquelo de tal manera que se comparen las medidas estadísticas calculadas según antecedente de COVID-19:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  group_by(sexo) %>% 
  summarise(media_edad = mean(edad, na.rm = TRUE), 
            DE_edad = sd(edad, na.rm = TRUE), 
            mediana_edad = median(edad, na.rm = TRUE),
            media_tref = mean(tdosis_refuerzo, na.rm = TRUE),
            DE_tref = sd(tdosis_refuerzo, na.rm = TRUE),
            mediana_tref = median(tdosis_refuerzo, na.rm = TRUE))
```
:::


## Análisis descriptivo univariado de datos categóricos

### Ejercicio 11 {.unnumbered}

Crear una tabla con las frecuencias absolutas usando {dplyr}. Luego cree una tabla con frecuencias absolutas y relativas usando {janitor} y relativa del sexo, primero con los NA y luego excluyendo los NA: 

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

- Con dplyr:

```{r}
data_inmuno %>% 
  count(sexo)
```

- Con janitor:

Con NA´s

```{r}
data_inmuno %>% 
  tabyl(sexo, show_na = TRUE)
```

Sin NA´s

```{r}
data_inmuno %>% 
  tabyl(sexo, show_na = FALSE)
```

:::

### Ejercicio 12 {.unnumbered}

Genere una tabla descriptiva para comorbilidades usando {dplyr}, {janitor} y {summarytools}:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

_Compare las salidas de los tres paquetes_

::: {.callout-caution collapse="true"}

## Solución

- Con dplyr:

```{r}
data_inmuno %>% 
  count(comorb)  
```

- Con janitor:

```{r}
data_inmuno %>% 
  tabyl(comorb)  
```

- Con summarytools:

```{r}
data_inmuno %>% 
  select(comorb) %>% 
  freq()
```
:::

### Ejercicio 13 {.unnumbered}

Genere una tabla descriptiva para el tipo de refuerzo recibido que presente frecuencias absolutas y relativas, excluya los NA:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
data_inmuno %>% 
  tabyl(tipo_refuerzo)
```

- Pueden hacerlo también con {dplyr} o {summarytools}

:::

### Ejercicio 14 {.unnumbered}

Genere una tabla descriptiva para antecedente de COVID-19:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

- Puede usar todos los paquetes enseñados, aquí mostramos la opción de count:

```{r}
data_inmuno |> 
  tabyl(ant_COV)
```

:::

:::{.callout-note collapse=false appearance='default' icon=true}
## La opción de R base:
- También podemos crear tablas con la opción de `R base` table().

```{r}
table(data_inmuno$ant_COV)
```

:::


## Análisis descriptivo bivariado de datos categóricos

### Ejercicio 15 {.unnumbered}

Genere una tabla bivariada con el sexo y el antecedente de COVID-19:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

- Opción dplyr (menos amigable):

```{r}
data_inmuno |> 
  group_by(sexo) |> 
  count(ant_COV) |> 
  ungroup()
```

- Opción tabyl:

```{r}
data_inmuno |> 
  tabyl(sexo, ant_COV)
```

- Opción tabyl adornada:

Mostrar fila a fila como funciona.

```{r}
data_inmuno |> 
  tabyl(sexo, ant_COV) |> 
  adorn_percentages("row") |> 
  adorn_pct_formatting(digits = 2) |> 
  adorn_ns()
```

- Opción gmodels (opción recomendada para análisis inicial/exploratoria, es más rápida y directa):

```{r}
CrossTable(data_inmuno$sexo, data_inmuno$ant_COV)
```
:::

:::{.callout-note collapse=false appearance='default' icon=true}
## Uso de $ de R base
- {gmodels} es un paquete que se sustenta en R base.
- Por lo tanto, es necesario usar el `$` para llamar las columnas de interés para crear la tabla de contingencia.
- Aunque es molestoso estar repitiendo el nombre de la base constantemente para llamar la variable con $, el formato de sus tablas lo valen. 
:::


### Ejercicio 16 {.unnumbered}

Genere una tabla bivariada entre sexo y tipo de refuerzo recibido:

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
CrossTable(data_inmuno$sexo, data_inmuno$tipo_refuerzo)
```
:::

### Ejercicio 17 {.unnumbered}

Genere una tabla bivariada entre comorbilidades y tipo de refuerzo recibido

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
CrossTable(data_inmuno$comorb, data_inmuno$tipo_refuerzo)
```
:::

### Ejercicio 18 {.unnumbered}

Ahora utiliza data_ebola y genera tablas bivariadas entre gender y fever, chills, cough, aches y vomit (una tabla por cada par de variables: ejm gender y fever, gender y chills, etc)

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

```{r}
CrossTable(data_ebola$gender, data_ebola$fever)
```

```{r}
CrossTable(data_ebola$gender, data_ebola$chills)
```

```{r}
CrossTable(data_ebola$gender, data_ebola$cough)
```

```{r}
CrossTable(data_ebola$gender, data_ebola$aches)
```

```{r}
CrossTable(data_ebola$gender, data_ebola$vomit)
```
:::

## Gráficos comparativos para datos numéricos y categóricos

### Ejercicio 19 {.unnumbered}

Cree un gráfico de cajas comparando el IgG Final según tipo de refuero recibido. Guardelo como p1. Luego, agregue un gráfico de puntos con ruido (jittered) y guárdelo como p2. Por último, cambie la geometrái de caja por la de violin y guárdelo como p3. En todos los casos use tema minimal. 

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

_Compare p1, p2 y p3_

::: {.callout-caution collapse="true"}

## Solución

- p1:

Si no se elimina la categoría perdida pasa esto:

```{r}
p1 <- data_inmuno |> 
  ggplot(aes(x = tipo_refuerzo, y = IgG_Final)) + 
  geom_boxplot() + 
  theme_minimal()

p1
```

Hay que eliminarla primero:

```{r}
p1 <- data_inmuno |> 
  filter(tipo_refuerzo != "") |> 
  ggplot(aes(x = tipo_refuerzo, y = IgG_Final)) + 
  geom_boxplot() + 
  theme_minimal()

p1
```


- p2:

```{r}
p2 <- data_inmuno |> 
  filter(tipo_refuerzo != "") |> 
  ggplot(aes(x = tipo_refuerzo, y = IgG_Final)) + 
  geom_boxplot() +
  geom_jitter() + 
  theme_minimal()

p2
```

- p3:

```{r}
p3 <- data_inmuno |> 
  filter(tipo_refuerzo != "") |> 
  ggplot(aes(x = tipo_refuerzo, y = IgG_Final)) + 
  geom_violin() +
  geom_jitter() + 
  theme_minimal()

p3
```

- p4:

```{r}
p4 <- data_inmuno |> 
  filter(tipo_refuerzo != "") |> 
  ggplot(aes(x = tipo_refuerzo, y = IgG_Final)) + 
  geom_violin() +
  geom_jitter() + 
  geom_boxplot() + 
  theme_minimal()

p4
```

:::

### Ejercicio 20 {.unnumbered}

Cree un gráfico de histograma del número de días desde el inicio de síntomas hasta la hospitalización de pacientes con ébola (days_onset_hosp). Controle los bins a 10. También cree un gráfico de densidad adicional.

_¿Cómo interpretarías los resultados encontrados? (discutirlo en la sesión)_

::: {.callout-caution collapse="true"}

## Solución

- Original:

```{r}
data_ebola |> 
  ggplot(aes(x = days_onset_hosp)) + 
  geom_histogram() + 
  theme_minimal()
```

- Cambiando bins:

```{r}
data_ebola |> 
  ggplot(aes(x = days_onset_hosp)) + 
  geom_histogram(bins = 10) + 
  theme_minimal()
```

- Creando gráfico de densidad:

```{r}
data_ebola |> 
  ggplot(aes(x = days_onset_hosp)) + 
  geom_density() + 
  theme_minimal()
```


:::

